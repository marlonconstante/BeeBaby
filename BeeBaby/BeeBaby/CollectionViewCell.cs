// This file has been autogenerated from a class added in the UI designer.

using System;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.Drawing;
using MonoTouch.CoreGraphics;
using Domain.Media;

namespace BeeBaby
{
	public partial class CollectionViewCell : UICollectionViewCell
	{
		public UIImage Image
		{
			get
			{ 
				return this.p_imageView.Image; 
			}
			set
			{
				p_imageView = new UIImageView(MaxResizeImage(value, MediaBase.ImageThumbnailWidth, MediaBase.ImageThumbnailHeight));
				p_imageView.ContentMode = UIViewContentMode.ScaleAspectFit;
				ContentView.AddSubview(p_imageView);
			}
		}

		public CollectionViewCell(IntPtr handle) : base(handle)
		{
		}

		/// <summary>
		/// Resize the image to be contained within a maximum width and height, keeping aspect ratio
		/// </summary>
		/// <returns>The resize image.</returns>
		/// <param name="sourceImage">Source image.</param>
		/// <param name="maxWidth">Max width.</param>
		/// <param name="maxHeight">Max height.</param>
		public UIImage MaxResizeImage(UIImage sourceImage, float maxWidth, float maxHeight)
		{
			var sourceWidth = sourceImage.Size.Width;
			var sourceHeight = sourceImage.Size.Height;

			float marginH = 0;
			float marginV = 0;
			float imgSize = 0;

			if (sourceWidth > sourceHeight)
			{
				marginH = (sourceWidth - sourceHeight) / 2;
				imgSize = sourceHeight;
			}
			else
			{
				marginV = (sourceHeight - sourceWidth) / 2;
				imgSize = sourceWidth;
			}
			UIImage cropped;
			using (CGImage cr = sourceImage.CGImage.WithImageInRect(new RectangleF(marginH, marginV, imgSize, imgSize)))
			{
				cropped = UIImage.FromImage(cr, 1f, sourceImage.Orientation );
			}

			UIGraphics.BeginImageContext(new SizeF(maxWidth, maxHeight));
			cropped.Draw(new RectangleF(0, 0, maxWidth, maxHeight));
			var resultImage = UIGraphics.GetImageFromCurrentImageContext();
			UIGraphics.EndImageContext();
			return resultImage;

		}
	}
}
